{"version":3,"sources":["assets\\script\\star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","spawnNewStar","gainScore","destroy","start","update","dt","isGameOver","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,UAAU,EAAE;AADJ,GAHP;AAOL;AAEA;AACAC,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAF2B,CAI3B;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,WAAOJ,IAAP;AACH,GAjBI;AAmBLK,EAAAA,QAAQ,EAAE,oBAAY;AAClB;AACA,SAAKR,IAAL,CAAUS,YAAV,GAFkB,CAIlB;;AACA,SAAKT,IAAL,CAAUU,SAAV,GALkB,CAOlB;;AACA,SAAKN,IAAL,CAAUO,OAAV;AACH,GA5BI;AA8BLC,EAAAA,KA9BK,mBA8BG,CAEP,CAhCI;AAiCL;AAEAC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA,QAAI,KAAKd,IAAL,CAAUe,UAAd,EAA0B;AACtB;AACH;;AACD,QAAI,KAAKjB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC5C;AACA,WAAKW,QAAL;AACA;AACH;;AACD,QAAIQ,YAAY,GAAG,IAAI,KAAKhB,IAAL,CAAUiB,KAAV,GAAkB,KAAKjB,IAAL,CAAUkB,YAAnD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKf,IAAL,CAAUgB,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC;AACH;AAhDI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        pickRadius: 0,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    getPlayerDistance: function () {\r\n        // Determine the distance according to the position of the Player node\r\n        var playerPos = this.game.player.getPosition();\r\n\r\n        // Calculate the distance between two nodes according to their positions\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function () {\r\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\r\n        this.game.spawnNewStar();\r\n\r\n        // Invoke the scoring method of the Game script\r\n        this.game.gainScore();\r\n\r\n        // Then destroy the current star's node\r\n        this.node.destroy();\r\n    },\r\n\r\n    start() {\r\n\r\n    },\r\n    // update\r\n\r\n    update: function (dt) {\r\n        // Determine if the distance between the Star and main character is less than the collecting distance for each frame\r\n        if (this.game.isGameOver) {\r\n            return;\r\n        }\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // Invoke collecting behavior\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\r\n        var minOpacity = 20;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (235 - minOpacity));\r\n    },\r\n});\r\n"]}