{"version":3,"sources":["assets\\script\\player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","runJumpAction","jumpUp","tween","by","y","easing","jumpDown","sequence","call","playJumpSound","repeatForever","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","left","right","onKeyUp","onLoad","xSpeed","startGame","jumpAction","node","then","start","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","update","dt","Math","abs","x"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // Main character's jump height\r\n        jumpHeight: 0,\r\n        // Main character's jump duration\r\n        jumpDuration: 0,\r\n        // Maximal movement speed\r\n        maxMoveSpeed: 0,\r\n        // Acceleration\r\n        accel: 0,\r\n\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n\r\n    },\r\n    runJumpAction() {\r\n        // Jump up\r\n        var jumpUp = cc.tween().by(this.jumpDuration, { y: this.jumpHeight }, { easing: 'sineOut' });\r\n        // Jump down\r\n        var jumpDown = cc.tween().by(this.jumpDuration, { y: -this.jumpHeight }, { easing: 'sineIn' });\r\n\r\n        // Create a easing and perform actions in the order of \"jumpUp\", \"jumpDown\"\r\n        var tween = cc.tween().sequence(jumpUp, jumpDown).call(this.playJumpSound, this);\r\n        // Repeat\r\n        return cc.tween().repeatForever(tween);\r\n    },\r\n    playJumpSound: function () {\r\n        // Invoke sound engine to play the sound\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onKeyDown(event) {\r\n        // Set a flag when key pressed\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n            case cc.macro.KEY.left:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.right:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp(event) {\r\n        // Unset a flag when key released\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n            case cc.macro.KEY.left:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.right:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onLoad() {\r\n        this.xSpeed = 0;\r\n    },\r\n\r\n    startGame() {\r\n\r\n        var jumpAction = this.runJumpAction();\r\n        cc.tween(this.node).then(jumpAction).start()\r\n\r\n        // Acceleration direction switch\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // The main character's current horizontal velocity\r\n\r\n\r\n        // Initialize the keyboard input listening\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n\r\n    },\r\n\r\n\r\n\r\n    onDestroy() {\r\n        // Cancel keyboard input monitoring\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n\r\n    update: function (dt) {\r\n        // Update speed of each frame according to the current acceleration direction\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // Restrict the movement speed of the main character to the maximum movement speed\r\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\r\n            // If speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // Update the position of the main character according to the current speed\r\n        this.node.x += this.xSpeed * dt;\r\n        if (Math.abs(this.node.x) > 980 / 2) {\r\n            this.node.x = 980 / 2 * this.node.x / Math.abs(this.node.x)\r\n        }\r\n    },\r\n});\r\n"]}